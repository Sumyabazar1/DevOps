image: node:12.22

stages:
  - install
  - test
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules
installing:
  stage: install
  tags:
    - docker
  script:
    - echo "Installing the project"
    - npm install
    - echo "Installed"
  only:
    - test

sonarqube-check:
  stage: install
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - test

    

testing-code-quality:
  stage: test
  needs: ["installing"]
  tags:
    - docker
  script:
    - echo "testing"
    - echo "npm run test"
    - echo "run other test ..."
    - echo "testing done"
  only:
    - test


build_to_test:
  stage: build
  needs: ["installing"]
  tags:
    - docker
  script:
    - npm run build
  artifacts:
    paths:
      - build
    expire_in: 60 mins
  only:
    - test

deploy_to_test:
  stage: deploy
  needs: ["build_to_test"]
  before_script:
    - apt-get update
    - apt-get install -y zip unzip
    - eval $(ssh-agent -s) # Run the SSH client 
    # Adding environment's variable SSH_PRIVATE_KEY to the SSH client's agent that manages the private keys
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    # Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    - mkdir mib
    - mv build mib
    - mv public mib
    - zip -r mib.zip mib
    - echo "backup and replace build file for testing env"
    - echo "ssh -o StrictHostKeyChecking=no user@ip "cd /usr/share/nginx/html mkdir $(date +%m_%d_%H) mv mib $(date +%m_%d_%H)""
    - echo "scp -o StrictHostKeyChecking=no mib.zip user@ip:/usr/share/nginx/html"
    - echo "ssh -o StrictHostKeyChecking=no root@172.16.3.9 "cd /usr/share/nginx/html unzip mib.zip""
  artifacts:
    paths:
      - mib.zip
  only:
    - test

build & deploy-prod:
  tags:
    - shelby
  stage: deploy
  script:
    - go mod tidy
    - go build -o main
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $TOKEN
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:latest --build-arg SSH_PRIVATE_KEY="$SECRET_KEY" .
    - docker push $CI_REGISTRY_IMAGE:latest
    - echo "deploy to container orchesration"
  only:
    - master
  when: manual
